Partie Symfony API BACKEND
après création de l'app
crétaion des entités (produits et catégories)

Lors de la création de l'API Restful --> gestion de contrôleur
qui va gérer les requêtes HTTP
On crée alors un contrôleur pour chaque entité : 
php bin/console make:controller ProductController

On a créé la base de donnée

On va procédons au 1er test pour produits avec Postman

Les CRUD sont fonctionnels

On commence la gestion des relations (1 à n, n à n, n à 1) : 

Pour plus tard lors de l'affiche de l'interface
accéder à tous les produits d'une catégorie :

$categorie = $categoriesRepository->find(1);
foreach ($categorie->getProduits() as $produit) {
    echo $produit->getNom();
}

obtenir la catégorie d’un produit :

$produit = $produitsRepository->find(1);
echo $produit->getCategorieRelation()->getNom();

// Dans ton contrôleur ou un script PHP :

// Récupérer le repository des catégories
$categoriesRepository = $entityManager->getRepository(Categories::class);

// Récupérer la catégorie avec l'ID 1
$categorie = $categoriesRepository->find(1);

// Vérifier que la catégorie existe
if ($categorie) {
    // Parcourir tous les produits de cette catégorie
    foreach ($categorie->getProduits() as $produit) {
        echo 'Nom du produit : ' . $produit->getNom() . PHP_EOL;
    }
} else {
    echo "Catégorie introuvable.";
}



-Passer à la validation des données avec : 
composer require symfony/validator

Script de validation de donnée avec les controleurs en cours...
- gestion des erreurs


On procède aux tests controleur de validation de données avec Postman

Test POST réussie : API fonctionne bien et a renvoyé les données.
La validation avec le controleur produits fonctionne bien
On procède à la mm pour Categories

changer le type de prix :
#[ORM\Column(type: 'float')]
private ?float $prix = null;

Puis on va insérer les données:
-utilisation de Faker pour remplir les entités avec des données fictives

D'abord s'assurer la connexion à la base de donnée
Puis l'insertion
Enfin les tests en temps réel

On va prendre 5 catégories : 
-Electronique, Livre, Maison, Vetement et Sport
Et 50 produits
Une description courte, le prix compris entre 10 euros et 500 euros

Parie front REACT + TAILWIND
Réutilisation du projet react (MDtic) avec les même procédés fetch url API, useState, création de components...

Faire le design system du site Teach'r sas : 
-récupérer les main colors (2-3 max)
-récupérer la font style et family

Documentation sur Tailwind pour élaborer le catalogue
https://tailwindcss.com/docs/installation
avec installation de l'extension TailwindIntelliSense (éviter les avertissements)

-Commencement partie frontend
intégration de react et tailwind dans le projet

Pour la fin :
Ajouter quelques fonctionnalités bonus (recherche? tri?)


Déploiement avec Vercel

configuration du lien avec la variable d'environnement :
tableau de bord -> projet - > settings -> environment variables :
REACT_APP_API_URL=https://ton-backend.vercel.app

